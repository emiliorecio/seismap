CREATE TABLE agency
(
  id BIGINT NOT NULL,
  code CHARACTER VARYING(3) NOT NULL,
  CONSTRAINT agency_pkey PRIMARY KEY (id),
  CONSTRAINT agency_code_key UNIQUE (code)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE agency OWNER TO postgres;


CREATE TABLE event
(
  id BIGINT NOT NULL,
  date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  depth NUMERIC(4,1) NOT NULL,
  CONSTRAINT event_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=TRUE
);
ALTER TABLE event OWNER TO postgres;

CREATE INDEX event_oid ON event (oid);

SELECT AddGeometryColumn('event', 'location', 900913, 'POINT', 2);

CREATE TABLE magnitude
(
  id BIGINT NOT NULL,
  "type" CHARACTER VARYING(8) NOT NULL,
  "value" NUMERIC(3,1) NOT NULL,
  reportingagency_id BIGINT NOT NULL,
  event_id BIGINT NOT NULL,
  CONSTRAINT magnitude_pkey PRIMARY KEY (id),
  CONSTRAINT fk_event_id FOREIGN KEY (event_id)
      REFERENCES event (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_reportingagency_id FOREIGN KEY (reportingagency_id)
      REFERENCES agency (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE magnitude OWNER TO postgres;

CREATE VIEW eventandaveragemagnitudes AS 
 SELECT event.id, event.date, event.depth, event.location,
    avg(mlmagnitude.value) AS averagemlmagnitude,
    avg(mbmagnitude.value) AS averagembmagnitude,
    avg(msmagnitude.value) AS averagemsmagnitude,
    avg(mwmagnitude.value) AS averagemwmagnitude,
    avg(mblgmagnitude.value) AS averagemblgmagnitude,
    avg(mcmagnitude.value) AS averagemcmagnitude
   FROM event
   LEFT JOIN magnitude mlmagnitude ON event.id = mlmagnitude.event_id AND mlmagnitude.type::text = 'ML'::text
   LEFT JOIN magnitude mbmagnitude ON event.id = mbmagnitude.event_id AND mbmagnitude.type::text = 'MB'::text
   LEFT JOIN magnitude msmagnitude ON event.id = msmagnitude.event_id AND msmagnitude.type::text = 'MS'::text
   LEFT JOIN magnitude mwmagnitude ON event.id = mwmagnitude.event_id AND mwmagnitude.type::text = 'MW'::text
   LEFT JOIN magnitude mblgmagnitude ON event.id = mblgmagnitude.event_id AND mblgmagnitude.type::text = 'MBLG'::text
   LEFT JOIN magnitude mcmagnitude ON event.id = mcmagnitude.event_id AND mcmagnitude.type::text = 'MC'::text
  GROUP BY event.id, event.date, event.depth, event.location;

ALTER TABLE eventandaveragemagnitudes OWNER TO postgres;

CREATE VIEW databounds AS 
 SELECT 1 AS id, min(event.depth) AS mindepth, max(event.depth) AS maxdepth, min(event.date) AS mindate, max(event.date) AS maxdate
   FROM event;

ALTER TABLE databounds OWNER TO postgres;


CREATE VIEW magnitudedatabounds AS 
  SELECT 1 as databound_id, 'ML' as magnitudetype, min(magnitude.value) AS min, max(magnitude.value) AS max FROM magnitude
    WHERE magnitude.type::text = 'ML'::text
  UNION
  SELECT 1 as databound_id, 'MB' as magnitudetype, min(magnitude.value) AS min, max(magnitude.value) AS max FROM magnitude
    WHERE magnitude.type::text = 'MB'::text
  UNION
  SELECT 1 as databound_id, 'MS' as magnitudetype, min(magnitude.value) AS min, max(magnitude.value) AS max FROM magnitude
    WHERE magnitude.type::text = 'MS'::text
  UNION
  SELECT 1 as databound_id, 'MW' as magnitudetype, min(magnitude.value) AS min, max(magnitude.value) AS max FROM magnitude
    WHERE magnitude.type::text = 'MW'::text
  UNION
  SELECT 1 as databound_id, 'MBLG' as magnitudetype, min(magnitude.value) AS min, max(magnitude.value) AS max FROM magnitude
    WHERE magnitude.type::text = 'MBLG'::text
  UNION
  SELECT 1 as databound_id, 'MC' as magnitudetype, min(magnitude.value) AS min, max(magnitude.value) AS max FROM magnitude
    WHERE magnitude.type::text = 'MC'::text;
    
ALTER TABLE magnitudedatabounds OWNER TO postgres;


